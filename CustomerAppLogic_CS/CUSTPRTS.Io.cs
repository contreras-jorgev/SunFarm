//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using ASNA.DataGate.Client;
using ASNA.DataGate.Common;
using ASNA.QSys.Runtime;
using System;
using System.Collections.Generic;


namespace YourCompany.YourApplication
{
    
    public partial class CUSTPRTS
    {
        private FixedDecimal<_9, _0> CMCUSTNO;
        private FixedString<_40> CMNAME;
        private FixedString<_35> CMADDR1;
        private FixedString<_35> CMADDR2;
        private FixedString<_30> CMCITY;
        private FixedString<_2> CMSTATE;
        private FixedString<_10> CMPOSTCODE;
        private FixedString<_1> CMACTIVE;
        private FixedDecimal<_10, _0> CMFAX;
        private FixedString<_20> CMPHONE;
        private FixedString<_5> CMUSRFLGS;
        private FixedString<_40> CMCONTACT;
        private FixedString<_40> CMCONEMAL;
        private FixedString<_1> CMYN01;
        private FixedString<_1> CMYN02;
        private FixedString<_1> CMYN03;
        static ILayout CUSTSL_000 = Layout.Packed(9, 0);
        static ILayout CUSTSL_001 = Layout.Zoned(4, 0);
        static ILayout CUSTSL_002 = Layout.Zoned(1, 0);
        static ILayout CUSTSL_003 = Layout.Packed(11, 2);
        static ILayout CUSTSL_004 = Layout.Packed(11, 2);
        static ILayout CUSTSL_005 = Layout.Packed(11, 2);
        static ILayout CUSTSL_006 = Layout.Packed(11, 2);
        static ILayout CUSTSL_007 = Layout.Packed(11, 2);
        static ILayout CUSTSL_008 = Layout.Packed(11, 2);
        static ILayout CUSTSL_009 = Layout.Packed(11, 2);
        static ILayout CUSTSL_010 = Layout.Packed(11, 2);
        static ILayout CUSTSL_011 = Layout.Packed(11, 2);
        static ILayout CUSTSL_012 = Layout.Packed(11, 2);
        static ILayout CUSTSL_013 = Layout.Packed(11, 2);
        static ILayout CUSTSL_014 = Layout.Packed(11, 2);
        private static Dictionary<string, string> CSMASTERL1FormatIDs = new Dictionary<string, string>()
        {
            { "RCSMASTL1", "MNWSCMjX4uCVz4ny/YR2N6c1XTM=" }
        };
        private static Dictionary<string, string> CUSTOMERL1FormatIDs = new Dictionary<string, string>()
        {
            { "RCUSTOMER", "6su4S42+ard0ZHitdjHOFT1WPw0=" }
        };
        private static Dictionary<string, string> QPRINTFormatIDs = new Dictionary<string, string>()
        {
            { "PrtHeading", "UfQiaYDIRet7tfwW1xsv5eeFbW0=" },
            { "PrtDetail", "3FlJHWrQG3JlsC1NDkyw7P5NIag=" },
            { "PrtCount", "8eeIJAjvow0MzNmdLg76H8ir7cI=" }
        };

        private FixedDecimal<_9, _0> CSCUSTNO
        {
            get
            {
                return this.CUSTSL.GetPacked(0, 9, 0);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 0, 9, 0);
            }
        }
        private FixedDecimal<_4, _0> CSYEAR
        {
            get
            {
                return this.CUSTSL.GetZoned(5, 4, 0);
            }
            set
            {
                this.CUSTSL.SetZoned(value, 5, 4, 0);
            }
        }
        private FixedDecimal<_1, _0> CSTYPE
        {
            get
            {
                return this.CUSTSL.GetZoned(9, 1, 0);
            }
            set
            {
                this.CUSTSL.SetZoned(value, 9, 1, 0);
            }
        }
        private FixedDecimal<_11, _2> CSSALES01
        {
            get
            {
                return this.CUSTSL.GetPacked(10, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 10, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES02
        {
            get
            {
                return this.CUSTSL.GetPacked(16, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 16, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES03
        {
            get
            {
                return this.CUSTSL.GetPacked(22, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 22, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES04
        {
            get
            {
                return this.CUSTSL.GetPacked(28, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 28, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES05
        {
            get
            {
                return this.CUSTSL.GetPacked(34, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 34, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES06
        {
            get
            {
                return this.CUSTSL.GetPacked(40, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 40, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES07
        {
            get
            {
                return this.CUSTSL.GetPacked(46, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 46, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES08
        {
            get
            {
                return this.CUSTSL.GetPacked(52, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 52, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES09
        {
            get
            {
                return this.CUSTSL.GetPacked(58, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 58, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES10
        {
            get
            {
                return this.CUSTSL.GetPacked(64, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 64, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES11
        {
            get
            {
                return this.CUSTSL.GetPacked(70, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 70, 11, 2);
            }
        }
        private FixedDecimal<_11, _2> CSSALES12
        {
            get
            {
                return this.CUSTSL.GetPacked(76, 11, 2);
            }
            set
            {
                this.CUSTSL.SetPacked(value, 76, 11, 2);
            }
        }
        private void PopulateBufferCSMASTERL1(string _, AdgDataSet _dataSet)
        {
            var _table = _dataSet.GetAdgTable("*FILE");
            System.Data.DataRow _row = _table.Row;
            _row["CSCUSTNO"] = ((decimal)(CSCUSTNO));
            _row["CSYEAR"] = ((decimal)(CSYEAR));
            _row["CSTYPE"] = ((decimal)(CSTYPE));
            _row["CSSALES01"] = ((decimal)(CSSALES01));
            _row["CSSALES02"] = ((decimal)(CSSALES02));
            _row["CSSALES03"] = ((decimal)(CSSALES03));
            _row["CSSALES04"] = ((decimal)(CSSALES04));
            _row["CSSALES05"] = ((decimal)(CSSALES05));
            _row["CSSALES06"] = ((decimal)(CSSALES06));
            _row["CSSALES07"] = ((decimal)(CSSALES07));
            _row["CSSALES08"] = ((decimal)(CSSALES08));
            _row["CSSALES09"] = ((decimal)(CSSALES09));
            _row["CSSALES10"] = ((decimal)(CSSALES10));
            _row["CSSALES11"] = ((decimal)(CSSALES11));
            _row["CSSALES12"] = ((decimal)(CSSALES12));
        }
        private void PopulateFieldsCSMASTERL1(string _, AdgDataSet _dataSet)
        {
            var _table = _dataSet.SetActive("*FILE");
            System.Data.DataRow _row = _table.Row;
            CSCUSTNO = ((decimal)(_row["CSCUSTNO"]));
            CSYEAR = ((decimal)(_row["CSYEAR"]));
            CSTYPE = ((decimal)(_row["CSTYPE"]));
            CSSALES01 = ((decimal)(_row["CSSALES01"]));
            CSSALES02 = ((decimal)(_row["CSSALES02"]));
            CSSALES03 = ((decimal)(_row["CSSALES03"]));
            CSSALES04 = ((decimal)(_row["CSSALES04"]));
            CSSALES05 = ((decimal)(_row["CSSALES05"]));
            CSSALES06 = ((decimal)(_row["CSSALES06"]));
            CSSALES07 = ((decimal)(_row["CSSALES07"]));
            CSSALES08 = ((decimal)(_row["CSSALES08"]));
            CSSALES09 = ((decimal)(_row["CSSALES09"]));
            CSSALES10 = ((decimal)(_row["CSSALES10"]));
            CSSALES11 = ((decimal)(_row["CSSALES11"]));
            CSSALES12 = ((decimal)(_row["CSSALES12"]));
        }
        private void PopulateBufferCUSTOMERL1(string _, AdgDataSet _dataSet)
        {
            var _table = _dataSet.GetAdgTable("*FILE");
            System.Data.DataRow _row = _table.Row;
            _row["CMCUSTNO"] = ((decimal)(CMCUSTNO));
            _row["CMNAME"] = ((string)(CMNAME));
            _row["CMADDR1"] = ((string)(CMADDR1));
            _row["CMADDR2"] = ((string)(CMADDR2));
            _row["CMCITY"] = ((string)(CMCITY));
            _row["CMSTATE"] = ((string)(CMSTATE));
            _row["CMPOSTCODE"] = ((string)(CMPOSTCODE));
            _row["CMACTIVE"] = ((string)(CMACTIVE));
            _row["CMFAX"] = ((decimal)(CMFAX));
            _row["CMPHONE"] = ((string)(CMPHONE));
            _row["CMUSRFLGS"] = ((string)(CMUSRFLGS));
            _row["CMCONTACT"] = ((string)(CMCONTACT));
            _row["CMCONEMAL"] = ((string)(CMCONEMAL));
            _row["CMYN01"] = ((string)(CMYN01));
            _row["CMYN02"] = ((string)(CMYN02));
            _row["CMYN03"] = ((string)(CMYN03));
        }
        private void PopulateFieldsCUSTOMERL1(string _, AdgDataSet _dataSet)
        {
            var _table = _dataSet.SetActive("*FILE");
            System.Data.DataRow _row = _table.Row;
            CMCUSTNO = ((decimal)(_row["CMCUSTNO"]));
            CMNAME = ((string)(_row["CMNAME"]));
            CMADDR1 = ((string)(_row["CMADDR1"]));
            CMADDR2 = ((string)(_row["CMADDR2"]));
            CMCITY = ((string)(_row["CMCITY"]));
            CMSTATE = ((string)(_row["CMSTATE"]));
            CMPOSTCODE = ((string)(_row["CMPOSTCODE"]));
            CMACTIVE = ((string)(_row["CMACTIVE"]));
            CMFAX = ((decimal)(_row["CMFAX"]));
            CMPHONE = ((string)(_row["CMPHONE"]));
            CMUSRFLGS = ((string)(_row["CMUSRFLGS"]));
            CMCONTACT = ((string)(_row["CMCONTACT"]));
            CMCONEMAL = ((string)(_row["CMCONEMAL"]));
            CMYN01 = ((string)(_row["CMYN01"]));
            CMYN02 = ((string)(_row["CMYN02"]));
            CMYN03 = ((string)(_row["CMYN03"]));
        }
        private void PopulateBufferQPRINTPrtHeading(AdgDataSet _dataSet)
        {
            var _table = _dataSet.GetAdgTable("PrtHeading");
            System.Data.DataRow _row = _table.Row;
            _row["CMNAME"] = ((string)(CMNAME));
            _row["wUnderline"] = ((string)(wUnderline));
        }
        private void PopulateFieldsQPRINTPrtHeading(AdgDataSet _dataSet)
        {
        }
        private void PopulateBufferQPRINTPrtDetail(AdgDataSet _dataSet)
        {
            var _table = _dataSet.GetAdgTable("PrtDetail");
            System.Data.DataRow _row = _table.Row;
            _row["wPrtYr"] = ((decimal)(wPrtYr));
            _row["CSSALES01"] = ((decimal)(CSSALES01));
            _row["CSSALES02"] = ((decimal)(CSSALES02));
            _row["CSSALES03"] = ((decimal)(CSSALES03));
            _row["CSSALES04"] = ((decimal)(CSSALES04));
            _row["CSSALES05"] = ((decimal)(CSSALES05));
            _row["CSSALES06"] = ((decimal)(CSSALES06));
            _row["CSSALES07"] = ((decimal)(CSSALES07));
            _row["CSSALES08"] = ((decimal)(CSSALES08));
            _row["CSSALES09"] = ((decimal)(CSSALES09));
            _row["CSSALES10"] = ((decimal)(CSSALES10));
            _row["CSSALES11"] = ((decimal)(CSSALES11));
            _row["CSSALES12"] = ((decimal)(CSSALES12));
        }
        private void PopulateFieldsQPRINTPrtDetail(AdgDataSet _dataSet)
        {
        }
        private void PopulateBufferQPRINTPrtCount(AdgDataSet _dataSet)
        {
            var _table = _dataSet.GetAdgTable("PrtCount");
            System.Data.DataRow _row = _table.Row;
            _row["wUnderline"] = ((string)(wUnderline));
            _row["wCount"] = ((decimal)(wCount));
            _row["CMNAME"] = ((string)(CMNAME));
        }
        private void PopulateFieldsQPRINTPrtCount(AdgDataSet _dataSet)
        {
        }
        private void PopulateBufferQPRINT(string _recordFormatName, AdgDataSet _dataSet)
        {
            if (string.Equals(_recordFormatName, "PrtHeading", System.StringComparison.CurrentCultureIgnoreCase))
            {
                this.PopulateBufferQPRINTPrtHeading(_dataSet);
            }
            else
            {
                if (string.Equals(_recordFormatName, "PrtDetail", System.StringComparison.CurrentCultureIgnoreCase))
                {
                    this.PopulateBufferQPRINTPrtDetail(_dataSet);
                }
                else
                {
                    if (string.Equals(_recordFormatName, "PrtCount", System.StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.PopulateBufferQPRINTPrtCount(_dataSet);
                    }
                }
            }
        }
        private void PopulateFieldsQPRINT(string _recordFormatName, AdgDataSet _dataSet)
        {
            if (string.Equals(_recordFormatName, "PrtHeading", System.StringComparison.CurrentCultureIgnoreCase))
            {
                this.PopulateFieldsQPRINTPrtHeading(_dataSet);
            }
            else
            {
                if (string.Equals(_recordFormatName, "PrtDetail", System.StringComparison.CurrentCultureIgnoreCase))
                {
                    this.PopulateFieldsQPRINTPrtDetail(_dataSet);
                }
                else
                {
                    if (string.Equals(_recordFormatName, "PrtCount", System.StringComparison.CurrentCultureIgnoreCase))
                    {
                        this.PopulateFieldsQPRINTPrtCount(_dataSet);
                    }
                }
            }
        }
        private DataStructure buildDSCUSTSL()
        {
            return new DataStructure(CUSTSL_000, CUSTSL_001, CUSTSL_002, CUSTSL_003, CUSTSL_004, CUSTSL_005, CUSTSL_006, CUSTSL_007, CUSTSL_008, CUSTSL_009, CUSTSL_010, CUSTSL_011, CUSTSL_012, CUSTSL_013, CUSTSL_014);
        }
    }
}
